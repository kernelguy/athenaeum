(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{260:function(t,a,e){"use strict";e.r(a);var s=e(6),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"how-to-use"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-to-use"}},[t._v("#")]),t._v(" How to use")]),t._v(" "),e("p",[t._v("Once you have your implementation completed, simply create a new instance of your DTO.")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$person")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"property-overloading"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#property-overloading"}},[t._v("#")]),t._v(" Property overloading")]),t._v(" "),e("p",[t._v("If a getter and or setter method has been defined for a property, then it becomes accessible in multiple ways.")]),t._v(" "),e("p",[t._v("The following example illustrates how the "),e("code",[t._v("name")]),t._v(" property can be set and retrieved, in multiple ways.")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Name can be set using normal setter methods")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$person")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'John'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// But you can also just set the property itself")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$person")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("name")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'Jack'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Will automatically invoke setName()")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// And you can also set it using an array-accessor")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$person")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'name'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'Jane'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Will also automatically invoke setName()")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... //")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Obtain name using the regular getter method")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$name")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$person")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Can also get it via invoking the property directly")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$name")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$person")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Will automatically invoke getName()")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Lastly, it can also be access via an array-accessor")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$name")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$person")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'name'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Also invokes the getName()")]),t._v("\n")])])]),e("p",[t._v("For additional information, please read about "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Mutator_method",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mutators and Accessor"),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"http://php.net/manual/en/language.oop5.overloading.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("PHP's overloading"),e("OutboundLink")],1),t._v(",\nand "),e("a",{attrs:{href:"http://php.net/manual/en/class.arrayaccess.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("PHP's Array-Access"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("By adding a "),e("a",{attrs:{href:"http://www.phpdoc.org/docs/latest/references/phpdoc/tags/property.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("@property")]),e("OutboundLink")],1),t._v(" tag to your interface or concrete implementation, your IDE will should be able to auto-complete the overloadable properties.")])]),t._v(" "),e("h2",{attrs:{id:"behind-the-scene"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#behind-the-scene"}},[t._v("#")]),t._v(" Behind the Scene")]),t._v(" "),e("p",[t._v("The "),e("RouterLink",{attrs:{to:"/archive/current/properties/"}},[e("code",[t._v("Overload")])]),t._v(" component is responsible most of the magic.")],1)])}),[],!1,null,null,null);a.default=n.exports}}]);